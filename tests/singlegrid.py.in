import os
import sys
sys.path.append(os.getenv('PYNAUNET_PATH'))

import numpy as np
from tomlkit.toml_file import TOMLFile

from @PYMODNAME@ import Naunet, NaunetData

config_path = os.getenv('NAUNET_CONFIG_PATH')
config = TOMLFile(os.path.join(config_path, "naunet_config.toml"))
content = config.read()
chemistry = content["chemistry"]
heating = chemistry["heating"]
cooling = chemistry["cooling"]
has_thermal = True if heating or cooling else False
summary = content["summary"]
species = summary["list_of_species"]
nspec = len(species)

naunet_solver = Naunet()
naunet_data = NaunetData()

spy = 86400.0 * 365.0


nH = 1e-2
tgas = 100000.0

naunet_data.nH = nH
naunet_data.Tgas = tgas


naunet_solver.Init()
if @USE_CUDA@:
    naunet_solver.Reset(1)


y = np.ones(len(species)+has_thermal) * 1e-40
y[species.index("H")]      = nH
y[species.index("H+")]     = 1e-4 * nH
y[species.index("He")]     = 1e-1 * nH
y[species.index("HD")]     = 1.5e-5 * nH
y[species.index("H2")]     = 1.5e-5 *nH
y[species.index("e-")]     = 1e-4 * nH
if has_thermal:
    y[nspec]               = tgas # Temperature



times = np.logspace(2, 7, 51)
times = np.append(0.0, times)
timesteps = times[1:] - times[:-1]


with open("evolution_pymodule.dat", "w") as evoldat:

    curtime = 0.0
    fmty = [f"{yi:13.7e}" for yi in y]
    evoldat.write(" ".join([f"{curtime:13.7e}", *fmty]))
    evoldat.write("\n")

    for ti, dtyr in enumerate(timesteps):
        dt = dtyr * spy
        y = naunet_solver.Solve(y, dt, naunet_data)
        
        naunet_data.Tgas = y[nspec]


        curtime += dtyr
        fmty = [f"{yi:13.7e}" for yi in y]
        evoldat.write(" ".join([f"{curtime:13.7e}", *fmty]))
        evoldat.write("\n")

naunet_solver.Finalize();